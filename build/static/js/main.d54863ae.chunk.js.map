{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","mixData","setMixData","Date","date","setDate","d3Container","createRef","useEffect","fetchData","rad","Math","min","d3","remove","svg","current","append","attr","color","data_ready","value","d","pie","arcGenerator","innerRadius","outerRadius","d3tip","tip","offset","html","data","key","round","selectAll","enter","on","show","hide","call","a","fetch","toISOString","response","json","mixObj","forEach","el","generationmix","mix","fuel","perc","avgMix","Object","entries","length","console","log","className","minDate","maxDate","placeholderText","selected","onChange","e","dateFormat","showYearDropdown","showMonthDropdown","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAwIeA,MAjIf,WAAgB,IAAD,EAEiBC,qBAFjB,mBAENC,EAFM,KAEGC,EAFH,OAGWF,mBAAS,IAAIG,MAHxB,mBAGNC,EAHM,KAGAC,EAHA,KAIPC,EAAcC,oBAAU,MAE9BC,qBAAU,WACRC,MACC,CAACL,IAGJI,qBAAU,WAGR,IAGME,EAAMC,KAAKC,IAHP,IACA,KAEgB,EADd,GAKZC,IAAU,WAAWC,SAGrBD,IAAU,OACPC,SAGH,IAAMC,EAAMF,IAAUP,EAAYU,SAC/BC,OAAO,OACPC,KAAK,QAhBE,KAiBPA,KAAK,SAhBE,KAiBTD,OAAO,KACLC,KAAK,YAAY,sBAEdC,EAAQN,IAAgBA,KAIxBO,EAFMP,MACTQ,OAAM,SAAAC,GAAC,OAAIA,EAAED,QACGE,CAAIV,IAAWZ,IAE5BuB,EAAeX,MAClBY,YAAY,GACZC,YAAYhB,GAETiB,EAAQC,cACXV,KAAK,QAAS,UACdW,OAAO,CAAC,GAAI,IACZC,MAAK,SAAAR,GAGJ,MAAO,WAFKA,EAAES,KAAKC,IAEG,cADVrB,KAAKsB,MAAmB,GAAbX,EAAES,KAAKV,OAAU,GACE,OAI9CN,EAAImB,UAAU,UACXH,KAAKX,GACLe,QACAlB,OAAO,QACLC,KAAK,IAAKM,GACVN,KAAK,QAAQ,SAAAI,GAAC,OAAIH,EAAMG,EAAES,KAAKC,QAC/Bd,KAAK,SAAU,SACjBkB,GAAG,YAAaT,EAAMU,MACtBD,GAAG,WAAWT,EAAMW,MAEvBvB,EAAIwB,KAAKZ,KAGR,CAAC1B,IAEJ,IAAMQ,EAAS,uCAAG,kCAAA+B,EAAA,+EAESC,MAAM,iDAAD,OAAkDrC,EAAKsC,cAAvD,WAFd,cAERC,EAFQ,gBAGKA,EAASC,OAHd,OAGRb,EAHQ,OAKRc,EAAS,CACb,QAAW,EACX,KAAQ,EACR,QAAW,EACX,IAAO,EACP,QAAW,EACX,MAAS,EACT,MAAS,EACT,MAAS,EACT,KAAQ,GAIVd,EAAKA,KAAKe,SAAQ,SAAAC,GAChBA,EAAGC,cAAcF,SAAS,SAAAG,GACxBJ,EAAOI,EAAIC,OAAOD,EAAIE,WAKpBC,EAAS,GACfC,OAAOC,QAAQT,GAAQC,SAAQ,SAAAC,GAC7BK,EAAOL,EAAG,IAAIA,EAAG,GAAGhB,EAAKA,KAAKwB,UAGhCrD,EAAW,eAAIkD,IA9BD,kDAiCdI,QAAQC,IAAR,MAjCc,0DAAH,qDAqCf,OACE,sBAAKC,UAAU,MAAf,UACE,qDACA,6IACA,yCACQ,cAAC,IAAD,CACJC,QAAS,IAAIxD,KAAK,cAClByD,QAAS,IAAIzD,KACb0D,gBAAgB,cAChBC,SAAU1D,EACV2D,SAAU,SAAAC,GAAC,OAAI3D,EAAQ2D,IACvBC,WAAW,aACXC,kBAAgB,EAChBC,mBAAiB,OAGrB,qBAAKC,IAAK9D,QCtHD+D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,EAAgBb,QAAQC,M","file":"static/js/main.d54863ae.chunk.js","sourcesContent":["import './App.css';\nimport * as d3 from \"d3\";\nimport { useState, useEffect, createRef } from \"react\"\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport tip from \"d3-tip\"\n\nfunction App() {\n\n  const [mixData, setMixData] = useState() // used to store the average mix date\n  const [date, setDate] = useState(new Date()) // used to store the data chosen by the date picker\n  const d3Container = createRef(null) // used so d3 can refer to the relevant div\n\n  useEffect(() => {\n    fetchData();\n  }, [date])\n\n  // d3\n  useEffect(() => {\n\n    // set vars\n    const w = 500;\n    const h = 500;\n    const pad = 40;\n    const rad = Math.min(w,h)/2 - pad;\n\n    \n    // clear any existing tooltips\n    d3.select(\".d3-tip\").remove()\n\n    // clear any existing svg\n    d3.select(\"svg\")\n      .remove();\n\n    // add svg to the d3 div\n    const svg = d3.select(d3Container.current)\n      .append(\"svg\")\n      .attr(\"width\",w)\n      .attr(\"height\",h)\n    .append(\"g\")\n      .attr(\"transform\",\"translate(\"+ w / 2 + \",\" + h / 2 +\")\");\n\n    const color = d3.scaleOrdinal(d3.schemeCategory10)\n    \n    const pie = d3.pie()\n      .value(d => d.value)\n    const data_ready = pie(d3.entries(mixData))\n    \n    const arcGenerator = d3.arc()\n      .innerRadius(0)\n      .outerRadius(rad)\n\n    const d3tip = tip()\n      .attr('class', 'd3-tip')\n      .offset([10, 0])\n      .html(d => {\n        const key = d.data.key\n        const val = Math.round(d.data.value*10)/10\n        return \"<strong>\"+key+\": </strong>\" + val+\"%\";\n  })\n\n\n    svg.selectAll(\"slices\") // add slices\n      .data(data_ready)\n      .enter()\n      .append(\"path\")\n        .attr(\"d\", arcGenerator)\n        .attr(\"fill\", d => color(d.data.key))\n        .attr(\"stroke\", \"black\")\n      .on(\"mouseover\", d3tip.show)\n      .on(\"mouseout\",d3tip.hide)\n\n    svg.call(d3tip)\n\n\n  }, [mixData])\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch(`https://api.carbonintensity.org.uk/generation/${date.toISOString()}/pt24h`)\n      const data = await response.json()\n\n      const mixObj = {\n        \"biomass\": 0,\n        \"coal\": 0,\n        \"imports\": 0,\n        \"gas\": 0,\n        \"nuclear\": 0,\n        \"other\": 0,\n        \"hydro\": 0,\n        \"solar\": 0,\n        \"wind\": 0\n      }\n\n      // loop through the results and add to obj so it can be averaged\n      data.data.forEach(el => {\n        el.generationmix.forEach((mix => {\n          mixObj[mix.fuel]+=mix.perc\n        }))\n      })\n\n      // average\n      const avgMix = {}      \n      Object.entries(mixObj).forEach(el => {\n        avgMix[el[0]]=el[1]/data.data.length\n      })\n\n      setMixData({...avgMix})\n\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>UK Power Generation</h1>\n      <h4>Pie chart displaying the proportions of various forms of power generation, averaged across the selected day</h4>\n      <div>\n        Date: <DatePicker\n          minDate={new Date(\"2018-05-12\")}\n          maxDate={new Date()}\n          placeholderText=\"Pick a date\"\n          selected={date}\n          onChange={e => setDate(e)}\n          dateFormat=\"dd/MM/yyyy\"\n          showYearDropdown\n          showMonthDropdown\n        />\n      </div>\n      <div ref={d3Container}>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}